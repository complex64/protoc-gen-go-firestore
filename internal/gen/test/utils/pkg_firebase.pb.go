// Code generated by protoc-gen-go-firestore. DO NOT EDIT.
// versions:
// 	protoc-gen-go-firestore 1.0.2
// 	protoc          (unknown)

package utils

import (
	firestore "cloud.google.com/go/firestore"
	context "context"
)

type FS_utils struct {
	client *firestore.Client
}

func Firestore(client *firestore.Client) *FS_utils {
	return &FS_utils{
		client: client,
	}
}

func (x *FS_utils) Accounts() *FS_utils_Accounts {
	return &FS_utils_Accounts{
		c: x.client.Collection("accounts"),
	}
}

type FS_utils_Accounts struct {
	c *firestore.CollectionRef
}

type FS_utils_Accounts_Query struct {
	q firestore.Query
}

func (x *FS_utils_Accounts) Where(path, op string, value interface{}) *FS_utils_Accounts_Query {
	return &FS_utils_Accounts_Query{
		q: x.c.Where(path, op, value),
	}
}

func (x *FS_utils_Accounts_Query) Where(path, op string, value interface{}) *FS_utils_Accounts_Query {
	return &FS_utils_Accounts_Query{
		q: x.q.Where(path, op, value),
	}
}

func (x *FS_utils_Accounts) Doc(id string) *FS_utils_Accounts_Doc {
	return &FS_utils_Accounts_Doc{
		d: x.c.Doc(id),
	}
}

type FS_utils_Accounts_Doc struct {
	d *firestore.DocumentRef
}

func (x *FS_utils_Accounts_Doc) Set(ctx context.Context, m *Session) error {
	fs, err := m.ToFirestore()
	if err != nil {
		return err
	}
	if _, err := x.d.Set(ctx, fs); err != nil {
		return err
	}
	return nil
}

func (x *FS_utils_Accounts_Doc) Users() *FS_utils_Accounts_Users {
	return &FS_utils_Accounts_Users{
		c: x.d.Collection("users"),
	}
}

type FS_utils_Accounts_Users struct {
	c *firestore.CollectionRef
}

type FS_utils_Accounts_Users_Query struct {
	q firestore.Query
}

func (x *FS_utils_Accounts_Users) Where(path, op string, value interface{}) *FS_utils_Accounts_Users_Query {
	return &FS_utils_Accounts_Users_Query{
		q: x.c.Where(path, op, value),
	}
}

func (x *FS_utils_Accounts_Users_Query) Where(path, op string, value interface{}) *FS_utils_Accounts_Users_Query {
	return &FS_utils_Accounts_Users_Query{
		q: x.q.Where(path, op, value),
	}
}

func (x *FS_utils_Accounts_Users) Doc(id string) *FS_utils_Accounts_Users_Doc {
	return &FS_utils_Accounts_Users_Doc{
		d: x.c.Doc(id),
	}
}

type FS_utils_Accounts_Users_Doc struct {
	d *firestore.DocumentRef
}

func (x *FS_utils_Accounts_Users_Doc) Set(ctx context.Context, m *Session) error {
	fs, err := m.ToFirestore()
	if err != nil {
		return err
	}
	if _, err := x.d.Set(ctx, fs); err != nil {
		return err
	}
	return nil
}

func (x *FS_utils_Accounts_Users_Doc) Sessions() *FS_utils_Accounts_Users_Sessions {
	return &FS_utils_Accounts_Users_Sessions{
		c: x.d.Collection("sessions"),
	}
}

type FS_utils_Accounts_Users_Sessions struct {
	c *firestore.CollectionRef
}

type FS_utils_Accounts_Users_Sessions_Query struct {
	q firestore.Query
}

func (x *FS_utils_Accounts_Users_Sessions) Where(path, op string, value interface{}) *FS_utils_Accounts_Users_Sessions_Query {
	return &FS_utils_Accounts_Users_Sessions_Query{
		q: x.c.Where(path, op, value),
	}
}

func (x *FS_utils_Accounts_Users_Sessions_Query) Where(path, op string, value interface{}) *FS_utils_Accounts_Users_Sessions_Query {
	return &FS_utils_Accounts_Users_Sessions_Query{
		q: x.q.Where(path, op, value),
	}
}

func (x *FS_utils_Accounts_Users_Sessions) Doc(id string) *FS_utils_Accounts_Users_Sessions_Doc {
	return &FS_utils_Accounts_Users_Sessions_Doc{
		d: x.c.Doc(id),
	}
}

type FS_utils_Accounts_Users_Sessions_Doc struct {
	d *firestore.DocumentRef
}

func (x *FS_utils_Accounts_Users_Sessions_Doc) Set(ctx context.Context, m *Session) error {
	fs, err := m.ToFirestore()
	if err != nil {
		return err
	}
	if _, err := x.d.Set(ctx, fs); err != nil {
		return err
	}
	return nil
}
