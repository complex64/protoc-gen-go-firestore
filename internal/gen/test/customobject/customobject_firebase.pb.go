// Code generated by protoc-gen-go-firestore. DO NOT EDIT.
// versions:
// 	protoc-gen-go-firestore 2.1.1
// 	protoc          (unknown)
// source: customobject/customobject.proto

package customobject

import (
	json "encoding/json"
	_ "github.com/complex64/protoc-gen-go-firestore/firestorepb"
	protojson "google.golang.org/protobuf/encoding/protojson"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	time "time"
)

// FirestoreCity is the Firestore Custom Object for customobject.City.
type FirestoreCity struct {
	StringField            string                         `firestore:"stringField,omitempty"`
	RepeatedStringField    []string                       `firestore:"repeatedStringField,omitempty"`
	BoolField              bool                           `firestore:"boolField,omitempty"`
	RepeatedBoolField      []bool                         `firestore:"repeatedBoolField,omitempty"`
	BytesField             []byte                         `firestore:"bytesField,omitempty"`
	RepeatedBytesField     [][]byte                       `firestore:"repeatedBytesField,omitempty"`
	Int32Field             int32                          `firestore:"int32Field,omitempty"`
	RepeatedInt32Field     []int32                        `firestore:"repeatedInt32Field,omitempty"`
	Int64Field             int64                          `firestore:"int64Field,omitempty"`
	RepeatedInt64Field     []int64                        `firestore:"repeatedInt64Field,omitempty"`
	Uint32Field            uint32                         `firestore:"uint32Field,omitempty"`
	RepeatedUint32Field    []uint32                       `firestore:"repeatedUint32Field,omitempty"`
	Sint32Field            int32                          `firestore:"sint32Field,omitempty"`
	RepeatedSint32Field    []int32                        `firestore:"repeatedSint32Field,omitempty"`
	Sint64Field            int64                          `firestore:"sint64Field,omitempty"`
	RepeatedSint64Field    []int64                        `firestore:"repeatedSint64Field,omitempty"`
	FloatField             float32                        `firestore:"floatField,omitempty"`
	RepeatedFloatField     []float32                      `firestore:"repeatedFloatField,omitempty"`
	DoubleField            float64                        `firestore:"doubleField,omitempty"`
	RepeatedDoubleField    []float64                      `firestore:"repeatedDoubleField,omitempty"`
	TimestampField         time.Time                      `firestore:"timestampField,omitempty"`
	RepeatedTimestampField []time.Time                    `firestore:"repeatedTimestampField,omitempty"`
	NamedStringField       string                         `firestore:"custom_name,omitempty"`
	IgnoredStringField     string                         `firestore:"-"`
	ServerTimestampField   time.Time                      `firestore:"serverTimestampField,serverTimestamp"`
	Mayor                  *FirestoreMayor                `firestore:"mayor,omitempty"`
	MyNestedField          *FirestoreCity_MyNestedMessage `firestore:"myNestedField,omitempty"`
}

func FirestoreMapToCity(m map[string]any) (*City, error) {
	bs, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	msg := new(City)
	if err := protojson.Unmarshal(bs, msg); err != nil {
		return nil, err
	}
	return msg, nil
}

func (x *City) ToFirestoreMap() (map[string]any, error) {
	bs, err := protojson.Marshal(x)
	if err != nil {
		return nil, err
	}
	m := map[string]any{}
	if err := json.Unmarshal(bs, &m); err != nil {
		return nil, err
	}
	return m, nil
}

// FirestoreCity_MyNestedMessage is the Firestore Custom Object for customobject.City_MyNestedMessage.
type FirestoreCity_MyNestedMessage struct {
	Name string `firestore:"name,omitempty"`
}

func FirestoreMapToCity_MyNestedMessage(m map[string]any) (*City_MyNestedMessage, error) {
	bs, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	msg := new(City_MyNestedMessage)
	if err := protojson.Unmarshal(bs, msg); err != nil {
		return nil, err
	}
	return msg, nil
}

func (x *City_MyNestedMessage) ToFirestoreMap() (map[string]any, error) {
	bs, err := protojson.Marshal(x)
	if err != nil {
		return nil, err
	}
	m := map[string]any{}
	if err := json.Unmarshal(bs, &m); err != nil {
		return nil, err
	}
	return m, nil
}

// FirestoreMayor is the Firestore Custom Object for customobject.Mayor.
type FirestoreMayor struct {
	Name    string            `firestore:"name,omitempty"`
	Address *FirestoreAddress `firestore:"address,omitempty"`
}

func FirestoreMapToMayor(m map[string]any) (*Mayor, error) {
	bs, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	msg := new(Mayor)
	if err := protojson.Unmarshal(bs, msg); err != nil {
		return nil, err
	}
	return msg, nil
}

func (x *Mayor) ToFirestoreMap() (map[string]any, error) {
	bs, err := protojson.Marshal(x)
	if err != nil {
		return nil, err
	}
	m := map[string]any{}
	if err := json.Unmarshal(bs, &m); err != nil {
		return nil, err
	}
	return m, nil
}

// FirestoreAddress is the Firestore Custom Object for customobject.Address.
type FirestoreAddress struct {
	Value string `firestore:"value,omitempty"`
}

func FirestoreMapToAddress(m map[string]any) (*Address, error) {
	bs, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	msg := new(Address)
	if err := protojson.Unmarshal(bs, msg); err != nil {
		return nil, err
	}
	return msg, nil
}

func (x *Address) ToFirestoreMap() (map[string]any, error) {
	bs, err := protojson.Marshal(x)
	if err != nil {
		return nil, err
	}
	m := map[string]any{}
	if err := json.Unmarshal(bs, &m); err != nil {
		return nil, err
	}
	return m, nil
}
