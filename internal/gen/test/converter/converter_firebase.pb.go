// Code generated by protoc-gen-go-firestore. DO NOT EDIT.
// versions:
// 	protoc-gen-go-firestore v0.0.0
// 	protoc          (unknown)
// source: converter/converter.proto

package converter

import (
	_ "github.com/complex64/protoc-gen-go-firestore/firestorepb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	time "time"
)

// FirestoreCity is the Firestore Custom Object for converter.City.
type FirestoreCity struct {
	StringField            string      `firestore:"stringField,omitempty"`
	BoolField              bool        `firestore:"boolField,omitempty"`
	BytesField             []byte      `firestore:"bytesField,omitempty"`
	Int32Field             int32       `firestore:"int32Field,omitempty"`
	Int64Field             int64       `firestore:"int64Field,omitempty"`
	Uint32Field            uint32      `firestore:"uint32Field,omitempty"`
	Sint32Field            int32       `firestore:"sint32Field,omitempty"`
	Sint64Field            int64       `firestore:"sint64Field,omitempty"`
	FloatField             float32     `firestore:"floatField,omitempty"`
	DoubleField            float64     `firestore:"doubleField,omitempty"`
	TimestampField         time.Time   `firestore:"timestampField,omitempty"`
	RepeatedStringField    []string    `firestore:"repeatedStringField,omitempty"`
	RepeatedBoolField      []bool      `firestore:"repeatedBoolField,omitempty"`
	RepeatedBytesField     [][]byte    `firestore:"repeatedBytesField,omitempty"`
	RepeatedInt32Field     []int32     `firestore:"repeatedInt32Field,omitempty"`
	RepeatedInt64Field     []int64     `firestore:"repeatedInt64Field,omitempty"`
	RepeatedUint32Field    []uint32    `firestore:"repeatedUint32Field,omitempty"`
	RepeatedSint32Field    []int32     `firestore:"repeatedSint32Field,omitempty"`
	RepeatedSint64Field    []int64     `firestore:"repeatedSint64Field,omitempty"`
	RepeatedFloatField     []float32   `firestore:"repeatedFloatField,omitempty"`
	RepeatedDoubleField    []float64   `firestore:"repeatedDoubleField,omitempty"`
	RepeatedTimestampField []time.Time `firestore:"repeatedTimestampField,omitempty"`
}

// ToProto converts this FirestoreCity to its protobuf representation.
func (m *FirestoreCity) ToProto() (*City, error) {
	x := new(City)
	x.StringField = m.StringField
	x.BoolField = m.BoolField
	x.BytesField = m.BytesField
	x.Int32Field = m.Int32Field
	x.Int64Field = m.Int64Field
	x.Uint32Field = m.Uint32Field
	x.Sint32Field = m.Sint32Field
	x.Sint64Field = m.Sint64Field
	x.FloatField = m.FloatField
	x.DoubleField = m.DoubleField
	if m.TimestampField != (time.Time{}) {
		x.TimestampField = timestamppb.New(m.TimestampField)
	}
	x.RepeatedStringField = m.RepeatedStringField
	x.RepeatedBoolField = m.RepeatedBoolField
	x.RepeatedBytesField = m.RepeatedBytesField
	x.RepeatedInt32Field = m.RepeatedInt32Field
	x.RepeatedInt64Field = m.RepeatedInt64Field
	x.RepeatedUint32Field = m.RepeatedUint32Field
	x.RepeatedSint32Field = m.RepeatedSint32Field
	x.RepeatedSint64Field = m.RepeatedSint64Field
	x.RepeatedFloatField = m.RepeatedFloatField
	x.RepeatedDoubleField = m.RepeatedDoubleField
	{
		l := len(m.RepeatedTimestampField)
		x.RepeatedTimestampField = make([]*timestamppb.Timestamp, l)
		for i := 0; i < l; i++ {
			if m.RepeatedTimestampField[i] != (time.Time{}) {
				x.RepeatedTimestampField[i] = timestamppb.New(m.RepeatedTimestampField[i])
			}
		}
	}
	return x, nil
}

// ToFirestore returns the Firestore Custom Object for City.
func (x *City) ToFirestore() (*FirestoreCity, error) {
	m := new(FirestoreCity)
	m.StringField = x.StringField
	m.BoolField = x.BoolField
	m.BytesField = x.BytesField
	m.Int32Field = x.Int32Field
	m.Int64Field = x.Int64Field
	m.Uint32Field = x.Uint32Field
	m.Sint32Field = x.Sint32Field
	m.Sint64Field = x.Sint64Field
	m.FloatField = x.FloatField
	m.DoubleField = x.DoubleField
	if t := x.TimestampField; t != nil {
		m.TimestampField = t.AsTime()
	}
	m.RepeatedStringField = x.RepeatedStringField
	m.RepeatedBoolField = x.RepeatedBoolField
	m.RepeatedBytesField = x.RepeatedBytesField
	m.RepeatedInt32Field = x.RepeatedInt32Field
	m.RepeatedInt64Field = x.RepeatedInt64Field
	m.RepeatedUint32Field = x.RepeatedUint32Field
	m.RepeatedSint32Field = x.RepeatedSint32Field
	m.RepeatedSint64Field = x.RepeatedSint64Field
	m.RepeatedFloatField = x.RepeatedFloatField
	m.RepeatedDoubleField = x.RepeatedDoubleField
	{
		l := len(x.RepeatedTimestampField)
		m.RepeatedTimestampField = make([]time.Time, l)
		for i := 0; i < l; i++ {
			if x.RepeatedTimestampField[i] != nil {
				m.RepeatedTimestampField[i] = x.RepeatedTimestampField[i].AsTime()
			}
		}
	}
	return m, nil
}
